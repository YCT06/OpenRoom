// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(OpenRoomContext))]
    partial class OpenRoomContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationCore.Entities.AmentityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AmentityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<bool?>("SpecificInfo")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AmentityTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmentityName = "設備"
                        },
                        new
                        {
                            Id = 2,
                            AmentityName = "服務"
                        },
                        new
                        {
                            Id = 3,
                            AmentityName = "安全"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Ecpay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MerchantTradeNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentTypeChargeFee")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RtnCode")
                        .HasColumnType("int");

                    b.Property<string>("RtnMsg")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SimulatePaid")
                        .HasColumnType("int");

                    b.Property<int?>("TradeAmt")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TradeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TradeNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_Green");

                    b.HasIndex(new[] { "OrderId" }, "IX_Ecpay_OrderID");

                    b.ToTable("Ecpay", (string)null);
                });

            modelBuilder.Entity("ApplicationCore.Entities.LanguageSpeaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MemberId" }, "IX_LanguageSpeaker_MemberID");

                    b.ToTable("LanguageSpeaker", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Language = 0,
                            MemberId = 1
                        },
                        new
                        {
                            Id = 2,
                            Language = 1,
                            MemberId = 1
                        },
                        new
                        {
                            Id = 3,
                            Language = 0,
                            MemberId = 2
                        },
                        new
                        {
                            Id = 4,
                            Language = 2,
                            MemberId = 2
                        },
                        new
                        {
                            Id = 5,
                            Language = 0,
                            MemberId = 3
                        },
                        new
                        {
                            Id = 6,
                            Language = 3,
                            MemberId = 3
                        },
                        new
                        {
                            Id = 7,
                            Language = 0,
                            MemberId = 4
                        },
                        new
                        {
                            Id = 8,
                            Language = 4,
                            MemberId = 4
                        },
                        new
                        {
                            Id = 9,
                            Language = 0,
                            MemberId = 5
                        },
                        new
                        {
                            Id = 10,
                            Language = 5,
                            MemberId = 5
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountStatus")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DistrictName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmergencyNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Job")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Live")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Obsession")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pet")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelfIntroduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountStatus = 0,
                            Avatar = "https://picsum.photos/240/240/?random=8",
                            CityName = "台中市",
                            CountryName = "臺灣",
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5117),
                            DistrictName = "中區",
                            EditAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5135),
                            Email = "leonardopikachu@smail.com",
                            FirstName = "Leonardo",
                            Job = "自由工作者",
                            LastName = "Pikachu",
                            Latitude = "24.1367091",
                            Live = "台中市, 臺灣",
                            Longitude = "120.6807817",
                            Mobile = "0933456789",
                            Obsession = "探索世界",
                            Password = "12345678",
                            Pet = "我的狐狸貓叫做寶貝",
                            PhoneNumber = "0933456789",
                            PostalCode = "40043",
                            SelfIntroduction = "是在地的台中人。喜歡到處旅遊親近自然，搜挖各地美食與文化。跟大部份喜愛旅遊的人一樣，從事美術設計與創作的事業。相逢相識即是緣分，歡迎光臨指教。",
                            Street = "建國路111號"
                        },
                        new
                        {
                            Id = 2,
                            AccountStatus = 0,
                            Avatar = "https://picsum.photos/240/240/?random=2",
                            CityName = "台北市",
                            CountryName = "臺灣",
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5149),
                            DistrictName = "大安區",
                            EditAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5150),
                            Email = "taylorswift@email.com",
                            FirstName = "Taylor",
                            Job = "自由攝影師",
                            LastName = "Swift",
                            Latitude = "25.0418651",
                            Live = "台北市, 臺灣",
                            Longitude = "121.5445294",
                            Mobile = "0955778899",
                            Obsession = "攝影、烹飪",
                            Password = "password123",
                            Pet = "我有一隻可愛的貓咪",
                            PhoneNumber = "0955778899",
                            PostalCode = "10651",
                            SelfIntroduction = "我是一位熱愛攝影的自由工作者,喜歡到處拍攝大自然的美景。平常也會參加一些攝影比賽,希望能藉此認識更多同好。除了攝影,我也很喜歡烹飪,經常嘗試不同國家的料理。",
                            Street = "忠孝東路六段200號"
                        },
                        new
                        {
                            Id = 3,
                            AccountStatus = 0,
                            Avatar = "https://picsum.photos/240/240/?random=5",
                            CityName = "高雄市",
                            CountryName = "臺灣",
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5157),
                            DistrictName = "鼓山區",
                            EditAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5158),
                            Email = "davidlee@mail.com",
                            FirstName = "小智",
                            Job = "教師",
                            LastName = "林",
                            Latitude = "22.6402174",
                            Live = "高雄市, 臺灣",
                            Longitude = "120.2690626",
                            Mobile = "0987654321",
                            Obsession = "戶外運動、旅遊",
                            Password = "qwertyui",
                            Pet = "我沒有寵物",
                            PhoneNumber = "0987654321",
                            PostalCode = "80449",
                            SelfIntroduction = "我是一位熱愛戶外運動的教師,平常假日我都會安排一些戶外活動,像是健行、爬山或是騎自行車。我也很喜歡分享旅遊的經驗,希望能藉此結交更多志同道合的夥伴。",
                            Street = "鼓山區鹽埕區287號"
                        },
                        new
                        {
                            Id = 4,
                            AccountStatus = 0,
                            Avatar = "https://picsum.photos/240/240/?random=7",
                            CityName = "台南市",
                            CountryName = "臺灣",
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5164),
                            DistrictName = "中西區",
                            EditAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5165),
                            Email = "sophiawang@gmail.com",
                            FirstName = "春嬌",
                            Job = "作家",
                            LastName = "余",
                            Latitude = "22.9952354",
                            Live = "台南市, 臺灣",
                            Longitude = "120.2095524",
                            Mobile = "0912345678",
                            Obsession = "閱讀、寫作",
                            Password = "bookworm",
                            Pet = "我有一隻可愛的貴賓狗",
                            PhoneNumber = "0912345678",
                            PostalCode = "70041",
                            SelfIntroduction = "我是一位熱愛閱讀的文學工作者,平常除了撰寫作品之外,也會參加一些讀書會或是文學講座。我很喜歡認識不同領域的人,互相交流想法和經驗。",
                            Street = "中西區民生路二段86號"
                        },
                        new
                        {
                            Id = 5,
                            AccountStatus = 0,
                            Avatar = "https://picsum.photos/240/240/?random=3",
                            CityName = "新竹市",
                            CountryName = "臺灣",
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5172),
                            DistrictName = "東區",
                            EditAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5173),
                            Email = "michaelchen@yahoo.com",
                            FirstName = "志明",
                            Job = "會計師",
                            LastName = "張",
                            Latitude = "24.8050914",
                            Live = "新竹市, 臺灣",
                            Longitude = "120.9705871",
                            Mobile = "0976543210",
                            Obsession = "音樂、旅遊",
                            Password = "singerslife",
                            Pet = "我有一隻可愛的哈士奇",
                            PhoneNumber = "0976543210",
                            PostalCode = "30076",
                            SelfIntroduction = "我是一位熱愛音樂的業餘歌手,平常會參加一些歌唱比賽或是在小酒吧駐場演出。除了音樂之外,我也很喜歡旅遊,希望能透過旅行認識更多不同的文化。",
                            Street = "東區光復路二段235號"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.MemberThirdPartyLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<int>("ThirdPartyId")
                        .HasColumnType("int")
                        .HasColumnName("ThirdPartyID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MemberId" }, "IX_MemberThirdPartyLink_MemberID");

                    b.HasIndex(new[] { "ThirdPartyId" }, "IX_MemberThirdPartyLink_ThirdPartyID");

                    b.ToTable("MemberThirdPartyLink", (string)null);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerCount")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("只有變更才會有值");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MemberId" }, "IX_Orders_MemberID");

                    b.HasIndex(new[] { "RoomId" }, "IX_Orders_RoomID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheckIn = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5230),
                            CheckOut = new DateTime(2024, 4, 3, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5234),
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5244),
                            CustomerCount = 2,
                            MemberId = 2,
                            OrderNo = "OMG000C01",
                            OrderStatus = 4,
                            PaymentMethod = 1,
                            ReceiptNo = "AE000NA01",
                            RoomId = 1,
                            TotalPrice = 10000m
                        },
                        new
                        {
                            Id = 2,
                            CheckIn = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5296),
                            CheckOut = new DateTime(2024, 4, 5, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5297),
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5299),
                            CustomerCount = 3,
                            MemberId = 1,
                            OrderNo = "OMG000C02",
                            OrderStatus = 4,
                            PaymentMethod = 1,
                            ReceiptNo = "AE000NA02",
                            RoomId = 2,
                            TotalPrice = 20000m
                        },
                        new
                        {
                            Id = 3,
                            CheckIn = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5303),
                            CheckOut = new DateTime(2024, 4, 6, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5304),
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5305),
                            CustomerCount = 4,
                            MemberId = 3,
                            OrderNo = "OMG000C03",
                            OrderStatus = 4,
                            PaymentMethod = 1,
                            ReceiptNo = "AE000NA03",
                            RoomId = 3,
                            TotalPrice = 30000m
                        },
                        new
                        {
                            Id = 4,
                            CheckIn = new DateTime(2024, 4, 5, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5308),
                            CheckOut = new DateTime(2024, 4, 8, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5309),
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5310),
                            CustomerCount = 4,
                            MemberId = 3,
                            OrderNo = "OMG000C03",
                            OrderStatus = 1,
                            PaymentMethod = 1,
                            ReceiptNo = "AE000NA03",
                            RoomId = 3,
                            TotalPrice = 30000m
                        },
                        new
                        {
                            Id = 5,
                            CheckIn = new DateTime(2024, 4, 7, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5313),
                            CheckOut = new DateTime(2024, 4, 11, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5314),
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5315),
                            CustomerCount = 2,
                            MemberId = 5,
                            OrderNo = "OMG000C04",
                            OrderStatus = 1,
                            PaymentMethod = 1,
                            ReceiptNo = "AE000NA04",
                            RoomId = 4,
                            TotalPrice = 40000m
                        },
                        new
                        {
                            Id = 6,
                            CheckIn = new DateTime(2024, 4, 9, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5317),
                            CheckOut = new DateTime(2024, 4, 13, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5318),
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5319),
                            CustomerCount = 3,
                            MemberId = 4,
                            OrderNo = "OMG000C05",
                            OrderStatus = 1,
                            PaymentMethod = 1,
                            ReceiptNo = "AE000NA05",
                            RoomId = 5,
                            TotalPrice = 50000m
                        },
                        new
                        {
                            Id = 7,
                            CheckIn = new DateTime(2024, 4, 9, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5321),
                            CheckOut = new DateTime(2024, 4, 13, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5322),
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5324),
                            CustomerCount = 3,
                            MemberId = 2,
                            OrderNo = "OMG000C05",
                            OrderStatus = 1,
                            PaymentMethod = 1,
                            ReceiptNo = "AE000NA05",
                            RoomId = 5,
                            TotalPrice = 50000m
                        },
                        new
                        {
                            Id = 8,
                            CheckIn = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5326),
                            CheckOut = new DateTime(2024, 4, 13, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5327),
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5328),
                            CustomerCount = 3,
                            MemberId = 2,
                            OrderNo = "OMG000C05",
                            OrderStatus = 1,
                            PaymentMethod = 1,
                            ReceiptNo = "AE000NA05",
                            RoomId = 5,
                            TotalPrice = 50000m
                        },
                        new
                        {
                            Id = 9,
                            CheckIn = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5330),
                            CheckOut = new DateTime(2024, 4, 13, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5331),
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5332),
                            CustomerCount = 3,
                            MemberId = 2,
                            OrderNo = "OMG000C05",
                            OrderStatus = 2,
                            PaymentMethod = 1,
                            ReceiptNo = "AE000NA05",
                            RoomId = 5,
                            TotalPrice = 50000m
                        },
                        new
                        {
                            Id = 10,
                            CheckIn = new DateTime(2024, 4, 3, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5336),
                            CheckOut = new DateTime(2024, 4, 13, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5337),
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5338),
                            CustomerCount = 3,
                            MemberId = 2,
                            OrderNo = "OMG000C05",
                            OrderStatus = 3,
                            PaymentMethod = 1,
                            ReceiptNo = "AE000NA05",
                            RoomId = 5,
                            TotalPrice = 50000m
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BathroomCount")
                        .HasColumnType("int");

                    b.Property<int>("BedCount")
                        .HasColumnType("int");

                    b.Property<int>("BedroomCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckInEndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CheckInStartTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime");

                    b.Property<decimal>("FixedPrice")
                        .HasColumnType("money");

                    b.Property<int>("GuestCount")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationDesription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<string>("NearyByTrasportation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("備註");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Review")
                        .HasColumnType("float");

                    b.Property<int>("RoomCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("RoomCategoryID");

                    b.Property<string>("RoomDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RoomStatus")
                        .HasColumnType("int");

                    b.Property<int?>("Sort")
                        .HasColumnType("int")
                        .HasComment("自定義排序");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("WeekendPrice")
                        .HasColumnType("money");

                    b.HasKey("Id")
                        .HasName("PK_RoomSource");

                    b.HasIndex(new[] { "MemberId" }, "IX_Rooms_MemberID");

                    b.HasIndex(new[] { "RoomCategoryId" }, "IX_Rooms_RoomCategoryID");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BathroomCount = 2,
                            BedCount = 4,
                            BedroomCount = 2,
                            CheckInEndTime = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5400),
                            CheckInStartTime = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5399),
                            CheckOutTime = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5401),
                            CityName = "台中市",
                            CountryName = "臺灣",
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5395),
                            DistrictName = "中區",
                            EditedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5396),
                            FixedPrice = 9453m,
                            GuestCount = 4,
                            IsDelete = false,
                            Latitude = "24.1367091",
                            LocationDesription = "如何到達高樓景觀公寓?<br>台中火車站：搭乘300~310任何一號的公車於科博館站下車，車程約10分鐘",
                            Longitude = "120.6807817",
                            MemberId = 2,
                            NearyByTrasportation = "16號小築高樓景觀公寓為短期月租套房",
                            PostalCode = "40043",
                            RoomCategoryId = 1,
                            RoomDescription = "乾淨 整潔 簡約 舒適 溫馨 雙人套房 ,房間乾淨清雅,每個房間皆是溫馨的和室木地板.有32吋液晶電視,小冰箱,冷氣,衛浴設備,距離火車站徒步約8分鐘,住宿地方徒步5分鐘有\"宮原眼科\"冰品 綠川廊道景點,想逛美食\"一中商圈\"徒步約15分鐘  整條皆為可吃可逛的不夜城。<br>*附近有收費停車場，停車方便。附近有多線公車直達-逢甲夜市-東海大學-梧棲魚港-彩虹眷村-高美濕地---南投縣、日月潭-埔里-清境農場-溪頭-衫林溪----鹿港小鎮@多處景點。<br><br>#請留意~入住前需先提供您的身份証或健保卡圖供大樓作登記，如不方便提供者請勿訂房，謝謝。<br>###有潔癖要求完美無瑕疵者請勿訂房、有潔癖要求完美無瑕疵者請勿訂房、有潔癖要求完美無瑕疵者請勿訂房<br>很重要所以說三次，謝謝🙏",
                            RoomName = "台中縱橫四海 躺著睡 橫著睡 讓你睡上癮的住宿首選（不挑房）",
                            RoomStatus = 2,
                            Street = "建國路111號"
                        },
                        new
                        {
                            Id = 2,
                            BathroomCount = 1,
                            BedCount = 1,
                            BedroomCount = 1,
                            CheckInEndTime = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5417),
                            CheckInStartTime = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5416),
                            CheckOutTime = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5418),
                            CityName = "台北市",
                            CountryName = "臺灣",
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5414),
                            DistrictName = "大安區",
                            EditedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5415),
                            FixedPrice = 2800m,
                            GuestCount = 2,
                            IsDelete = false,
                            Latitude = "25.0418651",
                            LocationDesription = "從捷運忠孝新生站出口步行約5分鐘即可抵達",
                            Longitude = "121.5445294",
                            MemberId = 3,
                            NearyByTrasportation = "捷運忠孝新生站步行5分鐘",
                            PostalCode = "10651",
                            RoomCategoryId = 1,
                            RoomDescription = "寬敞明亮的空間,採光良好,室內設計簡約時尚,提供高品質的住宿體驗。客房配備有舒適的雙人床、32吋液晶電視、小型冰箱和無線網路。浴室乾濕分離,備有淋浴設備和沐浴用品。距離捷運站僅步行5分鐘,周邊有許多美食及購物景點。<br><br>適合情侶、朋友或家庭入住,是您在台北市區短期居住的理想選擇。",
                            RoomName = "台北悠閒悅居 寧靜舒適的都會渡假體驗",
                            RoomStatus = 1,
                            Street = "忠孝東路六段200號"
                        },
                        new
                        {
                            Id = 3,
                            BathroomCount = 4,
                            BedCount = 8,
                            BedroomCount = 5,
                            CheckInEndTime = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5429),
                            CheckInStartTime = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5428),
                            CheckOutTime = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5430),
                            CityName = "高雄市",
                            CountryName = "臺灣",
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5426),
                            DistrictName = "鼓山區",
                            EditedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5427),
                            FixedPrice = 25000m,
                            GuestCount = 10,
                            IsDelete = false,
                            Latitude = "22.6402174",
                            LocationDesription = "從高雄市區開車約30分鐘可抵達",
                            Longitude = "120.2690626",
                            MemberId = 2,
                            NearyByTrasportation = "自駕車最方便",
                            PostalCode = "80449",
                            RoomCategoryId = 3,
                            RoomDescription = "獨棟別墅佔地寬廣,室內裝潢現代典雅,戶外備有私人泳池及庭園。客房採用一流設備,提供極致的舒適體驗。親臨此處,遠離城市喧囂,盡情放鬆身心,感受慵懶的渡假氣氛。<br><br>別墅內有多間獨立空調客房,可供家庭或多人入住。周邊環境清幽雅緻,鄰近海邊及知名景點,是您rendered度假的上佳選擇。",
                            RoomName = "高雄海景渡假別墅 優閒時光的私密度假勝地",
                            RoomStatus = 1,
                            Street = "鼓山區鹽埕區287號"
                        },
                        new
                        {
                            Id = 4,
                            BathroomCount = 3,
                            BedCount = 6,
                            BedroomCount = 4,
                            CheckInEndTime = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5444),
                            CheckInStartTime = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5443),
                            CheckOutTime = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5445),
                            CityName = "宜蘭縣",
                            CountryName = "臺灣",
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5440),
                            DistrictName = "員山鄉",
                            EditedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5441),
                            FixedPrice = 18000m,
                            GuestCount = 8,
                            IsDelete = false,
                            Latitude = "24.7807806",
                            LocationDesription = "詳細位置請洽會館服務人員",
                            Longitude = "121.7316414",
                            MemberId = 5,
                            NearyByTrasportation = "會館提供接駁交通工具",
                            PostalCode = "26942",
                            RoomCategoryId = 3,
                            RoomDescription = "會館坐落於翠綠山林間,四周環境遼闊寂靜,室內裝潢採用木質元素,充滿質樸自然的渡假氛圍。提供多種房型,可供家庭或多人入住。室內設施一應俱全,客房寬敞舒適,讓您在此盡情放鬆。<br><br>會館內備有高級餐廳及SPA水療中心,戶外有大片庭園及泳池,無論是安排戶外活動或純粹放空靜心,均是理想之選。",
                            RoomName = "宜蘭villa渡假會館 環抱大自然的世外桃源",
                            RoomStatus = 1,
                            Street = "員山鄉錦西村16號"
                        },
                        new
                        {
                            Id = 5,
                            BathroomCount = 2,
                            BedCount = 4,
                            BedroomCount = 3,
                            CheckInEndTime = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5453),
                            CheckInStartTime = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5453),
                            CheckOutTime = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5454),
                            CityName = "花蓮縣",
                            CountryName = "臺灣",
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5451),
                            DistrictName = "秀林鄉",
                            EditedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5451),
                            FixedPrice = 22000m,
                            GuestCount = 6,
                            IsDelete = false,
                            Latitude = "23.9719939",
                            LocationDesription = "詳細地點請洽villa服務人員",
                            Longitude = "121.5924542",
                            MemberId = 2,
                            NearyByTrasportation = "villa會提供接送服務",
                            PostalCode = "97858",
                            RoomCategoryId = 3,
                            RoomDescription = "隱身於花蓮深山中的villa,室內裝潢別出心裁,結合當代簡約元素與原木質感,呈現獨特的居住體驗。客房寬敞明亮,戶外環境清幽怡人,提供多種房型,適合家庭或多人入住。<br><br>周邊環境毗鄰山林溪流,會館內還設有私人大眾池、SPA水療等設施,讓您盡情放鬆身心,享受大自然的芬多精。",
                            RoomName = "花蓮秘境villa 深山裡的夢幻度假屋",
                            RoomStatus = 1,
                            Street = "秀林鄉富世村28號"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.RoomAmenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AmentityId")
                        .HasColumnType("int")
                        .HasColumnName("AmentityID");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AmentityId" }, "IX_RoomAmenities_AmentityID");

                    b.HasIndex(new[] { "RoomId" }, "IX_RoomAmenities_RoomID");

                    b.ToTable("RoomAmenities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmentityId = 1,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            AmentityId = 7,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 3,
                            AmentityId = 13,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 4,
                            AmentityId = 2,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 5,
                            AmentityId = 8,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 6,
                            AmentityId = 14,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 7,
                            AmentityId = 3,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 8,
                            AmentityId = 9,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 9,
                            AmentityId = 15,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 10,
                            AmentityId = 4,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 11,
                            AmentityId = 10,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 12,
                            AmentityId = 16,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 13,
                            AmentityId = 5,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 14,
                            AmentityId = 11,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 15,
                            AmentityId = 17,
                            RoomId = 5
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.RoomAmentityCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AmentityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AmentityTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AmentityTypeID");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_RoomAmentityCategoryies");

                    b.HasIndex(new[] { "AmentityTypeId" }, "IX_RoomAmentityCategoryies_AmentityTypeID");

                    b.ToTable("RoomAmentityCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmentityName = "Wifi",
                            AmentityTypeId = 1,
                            Icon = "<span class=\"material-symbols-outlined\">wifi</span>"
                        },
                        new
                        {
                            Id = 2,
                            AmentityName = "電視",
                            AmentityTypeId = 1,
                            Icon = "<span class=\"material-symbols-outlined\">tv</span>"
                        },
                        new
                        {
                            Id = 3,
                            AmentityName = "廚房",
                            AmentityTypeId = 1,
                            Icon = "<span class=\"material-symbols-outlined\">cooking</span>"
                        },
                        new
                        {
                            Id = 4,
                            AmentityName = "洗衣機",
                            AmentityTypeId = 1,
                            Icon = "<span class=\"material-symbols-outlined\">local_laundry_service</span>"
                        },
                        new
                        {
                            Id = 5,
                            AmentityName = "室內免費停車",
                            AmentityTypeId = 1,
                            Icon = "<span class=\"material-symbols-outlined\">local_parking</span>"
                        },
                        new
                        {
                            Id = 6,
                            AmentityName = "空調設備",
                            AmentityTypeId = 1,
                            Icon = "<span class=\"material-symbols-outlined\">ac_unit</span>"
                        },
                        new
                        {
                            Id = 7,
                            AmentityName = "游泳池",
                            AmentityTypeId = 2,
                            Icon = "<span class=\"material-symbols-outlined\">pool</span>"
                        },
                        new
                        {
                            Id = 8,
                            AmentityName = "按摩浴缸",
                            AmentityTypeId = 2,
                            Icon = "<span class=\"material-symbols-outlined\">hot_tub</span>"
                        },
                        new
                        {
                            Id = 9,
                            AmentityName = "庭院",
                            AmentityTypeId = 2,
                            Icon = "<span class=\"material-symbols-outlined\">outdoor_garden</span>"
                        },
                        new
                        {
                            Id = 10,
                            AmentityName = "烤肉區",
                            AmentityTypeId = 2,
                            Icon = "<span class=\"material-symbols-outlined\">outdoor_grill</span>"
                        },
                        new
                        {
                            Id = 11,
                            AmentityName = "戶外用餐區",
                            AmentityTypeId = 2,
                            Icon = "<span class=\"material-symbols-outlined\">deck</span>"
                        },
                        new
                        {
                            Id = 12,
                            AmentityName = "火坑",
                            AmentityTypeId = 2,
                            Icon = "<span class=\"material-symbols-outlined\">local_fire_department</span>"
                        },
                        new
                        {
                            Id = 13,
                            AmentityName = "煙霧警報器",
                            AmentityTypeId = 3,
                            Icon = "<span class=\"material-symbols-outlined\">detector_smoke</span>"
                        },
                        new
                        {
                            Id = 14,
                            AmentityName = "急救包",
                            AmentityTypeId = 3,
                            Icon = "<span class=\"material-symbols-outlined\">medical_services</span>"
                        },
                        new
                        {
                            Id = 15,
                            AmentityName = "一氧化碳警報器",
                            AmentityTypeId = 3,
                            Icon = "<span class=\"material-symbols-outlined\">detector_alarm</span>"
                        },
                        new
                        {
                            Id = 16,
                            AmentityName = "滅火器",
                            AmentityTypeId = 3,
                            Icon = "<span class=\"material-symbols-outlined\">fire_extinguisher</span>"
                        },
                        new
                        {
                            Id = 17,
                            AmentityName = "監視錄影器",
                            AmentityTypeId = 3,
                            Icon = "<span class=\"material-symbols-outlined\">motion_sensor_ative</span>"
                        },
                        new
                        {
                            Id = 18,
                            AmentityName = "武器",
                            AmentityTypeId = 3,
                            Icon = "<span class=\"material-symbols-outlined\">swords</span>"
                        },
                        new
                        {
                            Id = 19,
                            AmentityName = "危險動物",
                            AmentityTypeId = 3,
                            Icon = "<span class=\"material-symbols-outlined\">pets</span>"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.RoomCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomCategory1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("RoomCategory");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_RoomSourceCategory");

                    b.ToTable("RoomCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Icon = "<span class=\"material-symbols-outlined\">apartment</span>",
                            RoomCategory1 = "公寓 Apartment",
                            Sort = 1
                        },
                        new
                        {
                            Id = 2,
                            Icon = "<span class=\"material-symbols-outlined\">house</span>",
                            RoomCategory1 = "獨棟 House",
                            Sort = 2
                        },
                        new
                        {
                            Id = 3,
                            Icon = "<span class=\"material-symbols-outlined\">night_shelter</span>",
                            RoomCategory1 = "家庭式 Home",
                            Sort = 3
                        },
                        new
                        {
                            Id = 4,
                            Icon = "<span class=\"material-symbols-outlined\">bedroom_parent</span>",
                            RoomCategory1 = "精品 Luxury",
                            Sort = 4
                        },
                        new
                        {
                            Id = 5,
                            Icon = "<span class=\"material-symbols-outlined\">home_and_garden</span>",
                            RoomCategory1 = "莊園 Garden",
                            Sort = 5
                        },
                        new
                        {
                            Id = 6,
                            Icon = "<span class=\"material-symbols-outlined\">villa</span>",
                            RoomCategory1 = "民宿 BNB",
                            Sort = 6
                        },
                        new
                        {
                            Id = 7,
                            Icon = "<span class=\"material-symbols-outlined\">cabin</span>",
                            RoomCategory1 = "小木屋 Cabin",
                            Sort = 7
                        },
                        new
                        {
                            Id = 8,
                            Icon = "<span class=\"material-symbols-outlined\">camping</span>",
                            RoomCategory1 = "帳篷 Camp",
                            Sort = 8
                        },
                        new
                        {
                            Id = 9,
                            Icon = "<span class=\"material-symbols-outlined\">airport_shuttle</span>",
                            RoomCategory1 = "露營車CamperVan",
                            Sort = 9
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.RoomImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoomId" }, "IX_RoomImages_RoomID");

                    b.ToTable("RoomImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://picsum.photos/600/900/?random=1",
                            RoomId = 1,
                            Sort = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://picsum.photos/900/600/?random=2",
                            RoomId = 1,
                            Sort = 2
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://picsum.photos/900/600/?random=3",
                            RoomId = 1,
                            Sort = 3
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://picsum.photos/900/600/?random=4",
                            RoomId = 1,
                            Sort = 4
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://picsum.photos/900/600/?random=5",
                            RoomId = 1,
                            Sort = 5
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "https://picsum.photos/600/900/?random=6",
                            RoomId = 1,
                            Sort = 6
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "https://picsum.photos/900/600/?random=7",
                            RoomId = 1,
                            Sort = 7
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "https://picsum.photos/600/900/?random=8",
                            RoomId = 2,
                            Sort = 1
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "https://picsum.photos/900/600/?random=9",
                            RoomId = 2,
                            Sort = 2
                        },
                        new
                        {
                            Id = 10,
                            ImageUrl = "https://picsum.photos/900/600/?random=10",
                            RoomId = 2,
                            Sort = 3
                        },
                        new
                        {
                            Id = 11,
                            ImageUrl = "https://picsum.photos/900/600/?random=11",
                            RoomId = 2,
                            Sort = 4
                        },
                        new
                        {
                            Id = 12,
                            ImageUrl = "https://picsum.photos/900/600/?random=12",
                            RoomId = 2,
                            Sort = 5
                        },
                        new
                        {
                            Id = 13,
                            ImageUrl = "https://picsum.photos/600/900/?random=13",
                            RoomId = 2,
                            Sort = 6
                        },
                        new
                        {
                            Id = 14,
                            ImageUrl = "https://picsum.photos/900/600/?random=14",
                            RoomId = 2,
                            Sort = 7
                        },
                        new
                        {
                            Id = 15,
                            ImageUrl = "https://picsum.photos/600/900/?random=15",
                            RoomId = 3,
                            Sort = 1
                        },
                        new
                        {
                            Id = 16,
                            ImageUrl = "https://picsum.photos/900/600/?random=16",
                            RoomId = 3,
                            Sort = 2
                        },
                        new
                        {
                            Id = 17,
                            ImageUrl = "https://picsum.photos/900/600/?random=17",
                            RoomId = 3,
                            Sort = 3
                        },
                        new
                        {
                            Id = 18,
                            ImageUrl = "https://picsum.photos/900/600/?random=18",
                            RoomId = 3,
                            Sort = 4
                        },
                        new
                        {
                            Id = 19,
                            ImageUrl = "https://picsum.photos/900/600/?random=19",
                            RoomId = 3,
                            Sort = 5
                        },
                        new
                        {
                            Id = 20,
                            ImageUrl = "https://picsum.photos/600/900/?random=20",
                            RoomId = 3,
                            Sort = 6
                        },
                        new
                        {
                            Id = 21,
                            ImageUrl = "https://picsum.photos/900/600/?random=21",
                            RoomId = 3,
                            Sort = 7
                        },
                        new
                        {
                            Id = 22,
                            ImageUrl = "https://picsum.photos/600/900/?random=22",
                            RoomId = 4,
                            Sort = 1
                        },
                        new
                        {
                            Id = 23,
                            ImageUrl = "https://picsum.photos/900/600/?random=23",
                            RoomId = 4,
                            Sort = 2
                        },
                        new
                        {
                            Id = 24,
                            ImageUrl = "https://picsum.photos/900/600/?random=24",
                            RoomId = 4,
                            Sort = 3
                        },
                        new
                        {
                            Id = 25,
                            ImageUrl = "https://picsum.photos/900/600/?random=25",
                            RoomId = 4,
                            Sort = 4
                        },
                        new
                        {
                            Id = 26,
                            ImageUrl = "https://picsum.photos/900/600/?random=26",
                            RoomId = 4,
                            Sort = 5
                        },
                        new
                        {
                            Id = 27,
                            ImageUrl = "https://picsum.photos/600/900/?random=27",
                            RoomId = 4,
                            Sort = 6
                        },
                        new
                        {
                            Id = 28,
                            ImageUrl = "https://picsum.photos/900/600/?random=28",
                            RoomId = 4,
                            Sort = 7
                        },
                        new
                        {
                            Id = 29,
                            ImageUrl = "https://picsum.photos/600/900/?random=29",
                            RoomId = 5,
                            Sort = 1
                        },
                        new
                        {
                            Id = 30,
                            ImageUrl = "https://picsum.photos/900/600/?random=30",
                            RoomId = 5,
                            Sort = 2
                        },
                        new
                        {
                            Id = 31,
                            ImageUrl = "https://picsum.photos/900/600/?random=31",
                            RoomId = 5,
                            Sort = 3
                        },
                        new
                        {
                            Id = 32,
                            ImageUrl = "https://picsum.photos/900/600/?random=32",
                            RoomId = 5,
                            Sort = 4
                        },
                        new
                        {
                            Id = 33,
                            ImageUrl = "https://picsum.photos/900/600/?random=33",
                            RoomId = 5,
                            Sort = 5
                        },
                        new
                        {
                            Id = 34,
                            ImageUrl = "https://picsum.photos/600/900/?random=34",
                            RoomId = 5,
                            Sort = 6
                        },
                        new
                        {
                            Id = 35,
                            ImageUrl = "https://picsum.photos/900/600/?random=35",
                            RoomId = 5,
                            Sort = 7
                        },
                        new
                        {
                            Id = 36,
                            ImageUrl = "https://res.cloudinary.com/dtafyx6st/image/upload/v1711943619/uploadFolder/pixlr-image-generator-65c4bc723adf8c016f2dcfe7_2e9fb275-6317-49f5-8888-82e68c5964d4.png",
                            RoomId = 5,
                            Sort = 8
                        },
                        new
                        {
                            Id = 37,
                            ImageUrl = "https://res.cloudinary.com/dtafyx6st/image/upload/v1711943620/uploadFolder/sample_logo_e328c061-c25a-42d1-817a-10a0ec1e723c.png",
                            RoomId = 5,
                            Sort = 9
                        },
                        new
                        {
                            Id = 38,
                            ImageUrl = "https://res.cloudinary.com/dtafyx6st/image/upload/v1711943621/uploadFolder/step1_dc783258-4498-44ec-9f66-ac2256467667.webp",
                            RoomId = 5,
                            Sort = 10
                        },
                        new
                        {
                            Id = 39,
                            ImageUrl = "https://res.cloudinary.com/dtafyx6st/image/upload/v1711943621/uploadFolder/step2_b6792034-4d9f-48a9-aa69-944e7222d785.webp",
                            RoomId = 5,
                            Sort = 11
                        },
                        new
                        {
                            Id = 40,
                            ImageUrl = "https://res.cloudinary.com/dtafyx6st/image/upload/v1711943622/uploadFolder/step3_cb727d36-409a-41c5-a8cb-91bb99075777.webp",
                            RoomId = 5,
                            Sort = 12
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.RoomPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.Property<decimal>("SeparatePrice")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoomId" }, "IX_RoomPrices_RoomID");

                    b.ToTable("RoomPrices");
                });

            modelBuilder.Entity("ApplicationCore.Entities.RoomReview", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("RatingScore")
                        .HasColumnType("int");

                    b.Property<string>("ReviewContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoomReviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5813),
                            RatingScore = 5,
                            ReviewContent = "整潔度整體還不錯"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5817),
                            RatingScore = 5,
                            ReviewContent = "整潔度整體還不錯"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5819),
                            RatingScore = 5,
                            ReviewContent = "整潔度整體還不錯"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5821),
                            RatingScore = 5,
                            ReviewContent = "整潔度整體還不錯"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 4, 1, 19, 51, 13, 889, DateTimeKind.Local).AddTicks(5823),
                            RatingScore = 5,
                            ReviewContent = "整潔度整體還不錯"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.ThirdPartyLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProviderUserID");

                    b.HasKey("Id");

                    b.ToTable("ThirdPartyLogin", (string)null);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<string>("WishlistName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MemberId" }, "IX_Wishlist_MemberID");

                    b.ToTable("Wishlist", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MemberId = 1,
                            WishlistName = "彭于晏住我隔壁房"
                        },
                        new
                        {
                            Id = 2,
                            MemberId = 2,
                            WishlistName = "今晚不想回家系列"
                        },
                        new
                        {
                            Id = 3,
                            MemberId = 1,
                            WishlistName = "說走就走~ 我有的是時間"
                        },
                        new
                        {
                            Id = 4,
                            MemberId = 3,
                            WishlistName = "給我海闊天空的景色"
                        },
                        new
                        {
                            Id = 5,
                            MemberId = 2,
                            WishlistName = "初戀粉色系"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.WishlistDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.Property<int>("WishlistId")
                        .HasColumnType("int")
                        .HasColumnName("WishlistID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoomId" }, "IX_WishlistDetails_RoomID");

                    b.HasIndex(new[] { "WishlistId" }, "IX_WishlistDetails_WishlistID");

                    b.ToTable("WishlistDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoomId = 3,
                            WishlistId = 5
                        },
                        new
                        {
                            Id = 2,
                            RoomId = 2,
                            WishlistId = 5
                        },
                        new
                        {
                            Id = 3,
                            RoomId = 1,
                            WishlistId = 3
                        },
                        new
                        {
                            Id = 4,
                            RoomId = 2,
                            WishlistId = 3
                        },
                        new
                        {
                            Id = 5,
                            RoomId = 4,
                            WishlistId = 1
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Ecpay", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Order", "Order")
                        .WithMany("Ecpays")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Green_Orders");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ApplicationCore.Entities.LanguageSpeaker", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany("LanguageSpeakers")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_LanguageSpeaker_Members");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MemberThirdPartyLink", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany("MemberThirdPartyLinks")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_MemberThirdPartyLink_Members");

                    b.HasOne("ApplicationCore.Entities.ThirdPartyLogin", "ThirdParty")
                        .WithMany("MemberThirdPartyLinks")
                        .HasForeignKey("ThirdPartyId")
                        .IsRequired()
                        .HasConstraintName("FK_MemberThirdPartyLink_ThirdPartyLogin");

                    b.Navigation("Member");

                    b.Navigation("ThirdParty");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Order", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany("Orders")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Members");

                    b.HasOne("ApplicationCore.Entities.Room", "Room")
                        .WithMany("Orders")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Rooms");

                    b.Navigation("Member");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Room", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany("Rooms")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Rooms_Members");

                    b.HasOne("ApplicationCore.Entities.RoomCategory", "RoomCategory")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Rooms_RoomCategories");

                    b.Navigation("Member");

                    b.Navigation("RoomCategory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.RoomAmenity", b =>
                {
                    b.HasOne("ApplicationCore.Entities.RoomAmentityCategory", "Amentity")
                        .WithMany("RoomAmenities")
                        .HasForeignKey("AmentityId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomAmenities_RoomAmentityCategoryies");

                    b.HasOne("ApplicationCore.Entities.Room", "Room")
                        .WithMany("RoomAmenities")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomAmenities_Rooms");

                    b.Navigation("Amentity");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ApplicationCore.Entities.RoomAmentityCategory", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AmentityType", "AmentityType")
                        .WithMany("RoomAmentityCategories")
                        .HasForeignKey("AmentityTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomAmentityCategoryies_AmentityTypes");

                    b.Navigation("AmentityType");
                });

            modelBuilder.Entity("ApplicationCore.Entities.RoomImage", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Room", "Room")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomImages_Rooms");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ApplicationCore.Entities.RoomPrice", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Room", "Room")
                        .WithMany("RoomPrices")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomPrices_Rooms");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ApplicationCore.Entities.RoomReview", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Order", "IdNavigation")
                        .WithOne("RoomReview")
                        .HasForeignKey("ApplicationCore.Entities.RoomReview", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_RoomReviews_Orders");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Wishlist", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany("Wishlists")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Wishlist_Members");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ApplicationCore.Entities.WishlistDetail", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Room", "Room")
                        .WithMany("WishlistDetails")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_WishlistDetails_Rooms");

                    b.HasOne("ApplicationCore.Entities.Wishlist", "Wishlist")
                        .WithMany("WishlistDetails")
                        .HasForeignKey("WishlistId")
                        .IsRequired()
                        .HasConstraintName("FK_WishlistDetails_Wishlist");

                    b.Navigation("Room");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AmentityType", b =>
                {
                    b.Navigation("RoomAmentityCategories");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Member", b =>
                {
                    b.Navigation("LanguageSpeakers");

                    b.Navigation("MemberThirdPartyLinks");

                    b.Navigation("Orders");

                    b.Navigation("Rooms");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Order", b =>
                {
                    b.Navigation("Ecpays");

                    b.Navigation("RoomReview");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Room", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("RoomAmenities");

                    b.Navigation("RoomImages");

                    b.Navigation("RoomPrices");

                    b.Navigation("WishlistDetails");
                });

            modelBuilder.Entity("ApplicationCore.Entities.RoomAmentityCategory", b =>
                {
                    b.Navigation("RoomAmenities");
                });

            modelBuilder.Entity("ApplicationCore.Entities.RoomCategory", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ThirdPartyLogin", b =>
                {
                    b.Navigation("MemberThirdPartyLinks");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Wishlist", b =>
                {
                    b.Navigation("WishlistDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
